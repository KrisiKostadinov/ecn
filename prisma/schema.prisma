generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// starts user model

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// ends user model

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NOT_AVAILABLE
}

// ends user model

// starts image model

model Image {
  id            String         @id @default(uuid())
  url           String         @unique
  name          String
  title         String?
  alt           String?
  description   String?
  width         Int?
  height        Int?
  format        String?
  size          Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productImages ProductImage[]

  @@map("images")
}

// ends image model

// starts product model

model Product {
  id              String         @id @default(uuid())
  name            String         @unique @db.VarChar(255)
  slug            String         @unique @db.VarChar(255)
  description     String?        @db.Text
  originalPrice   Float?         @map("original_price")
  sellingPrice    Float?         @map("selling_price")
  quantity        Int?
  metaTitle       String?        @map("meta_title") @db.VarChar(70)
  metaDescription String?        @map("meta_description") @db.VarChar(160)
  metaKeywords    String?        @map("meta_keywords") @db.VarChar(1000)
  images          ProductImage[]

  @@map("products")
}

model ProductImage {
  id        String            @id @default(uuid())
  place     ProductImagePlace
  productId String            @map("product_id")
  product   Product           @relation(fields: [productId], references: [id])
  imageId   String            @map("image_id")
  image     Image             @relation(fields: [imageId], references: [id])

  @@map("product_images")
}

enum ProductImagePlace {
  FEATURED
  ADDITIONAL
}

// ends product model